# Generated by Django 5.2.1 on 2025-05-17 07:54

import apps.activity.managers.asset_manager
import apps.activity.managers.attachment_manager
import apps.activity.managers.deviceeventlog_manager
import apps.activity.managers.job_manager
import apps.activity.managers.location_manager
import apps.activity.managers.question_manager
import apps.activity.models.asset_model
import apps.activity.models.job_model
import apps.activity.models.location_model
import apps.activity.models.question_model
import apps.peoples.models
import django.contrib.gis.db.models.fields
import django.contrib.postgres.fields
import django.core.serializers.json
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('assetcode', models.CharField(max_length=50, verbose_name='Asset Code')),
                ('assetname', models.CharField(max_length=250, verbose_name='Asset Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('iscritical', models.BooleanField(verbose_name='Critical')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('identifier', models.CharField(choices=[('NONE', 'None'), ('ASSET', 'Asset'), ('CHECKPOINT', 'Checkpoint'), ('NEA', 'Non Engineering Asset')], default='NONE', max_length=55, verbose_name='Asset Identifier')),
                ('runningstatus', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working'), ('SCRAPPED', 'Scrapped')], max_length=55, null=True, verbose_name='Running Status')),
                ('capacity', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, verbose_name='Capacity')),
                ('asset_json', models.JSONField(blank=True, default=apps.activity.models.asset_model.asset_json, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
            ],
            options={
                'verbose_name': 'Asset',
                'verbose_name_plural': 'Assets',
                'db_table': 'asset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.asset_manager.AssetManager()),
            ],
        ),
        migrations.CreateModel(
            name='AssetLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('oldstatus', models.CharField(max_length=50, null=True, verbose_name='Old Status')),
                ('newstatus', models.CharField(max_length=50, verbose_name='New Status')),
                ('cdtz', models.DateTimeField(null=True, verbose_name='Created On')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
            ],
            options={
                'db_table': 'assetlog',
            },
            managers=[
                ('objects', apps.activity.managers.asset_manager.AssetLogManager()),
            ],
        ),
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('filepath', models.CharField(default='youtility4_media', max_length=100)),
                ('filename', models.ImageField(default='default.jpg', upload_to='')),
                ('owner', models.CharField(default='None', max_length=255)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('attachmenttype', models.CharField(choices=[('NONE', 'NONE'), ('ATTACHMENT', 'Attachment'), ('REPLY', 'Reply'), ('SIGN', 'SIGN'), ('METERREADING', 'Meter Reading'), ('LOGFILES', 'Log Files')], default='NONE', max_length=55)),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(default='POINT(0.0 0.0)', geography=True, srid=4326, verbose_name='GPS Location')),
                ('size', models.IntegerField(null=True)),
            ],
            options={
                'db_table': 'attachment',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.attachment_manager.AttachmentManager()),
            ],
        ),
        migrations.CreateModel(
            name='DeviceEventlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('deviceid', models.CharField(max_length=55, verbose_name='Device Id')),
                ('eventvalue', models.CharField(choices=[('stepcount', 'Step Count'), ('locationalert', 'Location Alert'), ('devicelogs', 'Device Logs'), ('login', 'Log In'), ('logout', 'Log Out')], max_length=50, verbose_name='Device Event')),
                ('locationserviceenabled', models.BooleanField(default=False, verbose_name='Location Serivice Enabled')),
                ('islocationmocked', models.BooleanField(default=False, verbose_name='Location Spoofed')),
                ('locationpermission', models.CharField(choices=[('locationalways', 'Location Always'), ('onlywhileyusing', 'Only While Using'), ('NONE', 'NONE')], default='NONE', max_length=25)),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326)),
                ('accuracy', models.CharField(default='-', max_length=25)),
                ('altitude', models.CharField(default='-', max_length=25)),
                ('receivedon', models.DateTimeField(auto_now_add=True, verbose_name='Received On')),
                ('batterylevel', models.CharField(default='NA', max_length=50, verbose_name='Battery Level')),
                ('signalstrength', models.CharField(default='NA', max_length=50, verbose_name='Signal Strength')),
                ('availintmemory', models.CharField(default='NA', max_length=50, verbose_name='Available Internal Memory')),
                ('availextmemory', models.CharField(default='NA', max_length=50, verbose_name='Available External Memory')),
                ('signalbandwidth', models.CharField(default='NA', max_length=50, verbose_name='Signal Bandwidth')),
                ('platformversion', models.CharField(default='NA', max_length=50, verbose_name='Android Version')),
                ('applicationversion', models.CharField(default='NA', max_length=50, verbose_name='App Version')),
                ('networkprovidername', models.CharField(choices=[('bluetooth', 'Bluetooth'), ('wifi', 'WIFI'), ('ethernet', 'Ethernet'), ('mobile', 'Mobile'), ('none', 'None')], default='none', max_length=55)),
                ('modelname', models.CharField(default='NA', max_length=50, verbose_name='Model Name')),
                ('installedapps', models.TextField(default='NA', verbose_name='Installed Apps')),
                ('stepcount', models.CharField(default='No Steps', max_length=55)),
            ],
            options={
                'db_table': 'deviceeventlog',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.deviceeventlog_manager.DELManager()),
            ],
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('jobname', models.CharField(max_length=200, verbose_name='Name')),
                ('jobdesc', models.CharField(max_length=500, verbose_name='Description')),
                ('fromdate', models.DateTimeField(verbose_name='From date')),
                ('uptodate', models.DateTimeField(verbose_name='To date')),
                ('cron', models.CharField(default='* * * * *', max_length=200, verbose_name='Cron Exp.')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('INTERNALTOUR', 'Internal Tour'), ('EXTERNALTOUR', 'External Tour'), ('PPM', 'PPM'), ('OTHER', 'Other'), ('SITEREPORT', 'Site Report'), ('INCIDENTREPORT', 'Incident Report'), ('ASSETLOG', 'Asset Log'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('GEOFENCE', 'Geofence')], max_length=100, null=True, verbose_name='Job Type')),
                ('planduration', models.IntegerField(verbose_name='Plan duration (min)')),
                ('gracetime', models.IntegerField(verbose_name='Grace Time')),
                ('expirytime', models.IntegerField(verbose_name='Expiry Time')),
                ('lastgeneratedon', models.DateTimeField(auto_now_add=True, verbose_name='Last generatedon')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=100, verbose_name='Priority')),
                ('seqno', models.SmallIntegerField(verbose_name='Serial No.')),
                ('starttime', models.TimeField(null=True, verbose_name='Start time')),
                ('endtime', models.TimeField(null=True, verbose_name='End time')),
                ('scantype', models.CharField(choices=[('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], max_length=50, verbose_name='Scan Type')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], default='NONE', max_length=55, null=True, verbose_name='Frequency type')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.job_model.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
                ('geojson', models.JSONField(blank=True, default=apps.activity.models.job_model.geojson_jobnjobneed, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
            ],
            options={
                'verbose_name': 'Job',
                'verbose_name_plural': 'Jobs',
                'db_table': 'job',
                'ordering': ['mdtz'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Jobneed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('jobdesc', models.CharField(max_length=200, verbose_name='Job Description')),
                ('plandatetime', models.DateTimeField(null=True, verbose_name='Plan date time')),
                ('expirydatetime', models.DateTimeField(null=True, verbose_name='Expiry date time')),
                ('gracetime', models.IntegerField(verbose_name='Grace time')),
                ('receivedonserver', models.DateTimeField(auto_now_add=True, verbose_name='Recived on server')),
                ('starttime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('endtime', models.DateTimeField(null=True, verbose_name='Start time')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('journeypath', django.contrib.gis.db.models.fields.LineStringField(blank=True, geography=True, null=True, srid=4326)),
                ('remarks', models.TextField(blank=True, null=True, verbose_name='Remark')),
                ('frequency', models.CharField(choices=[('NONE', 'None'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('BIMONTHLY', 'Bimonthly'), ('QUARTERLY', 'Quarterly'), ('HALFYEARLY', 'Half Yearly'), ('YEARLY', 'Yearly'), ('FORTNIGHTLY', 'Fort Nightly')], default='NONE', max_length=55, null=True, verbose_name='Frequency type')),
                ('jobstatus', models.CharField(choices=[('ASSIGNED', 'Assigned'), ('AUTOCLOSED', 'Auto Closed'), ('COMPLETED', 'Completed'), ('INPROGRESS', 'Inprogress'), ('PARTIALLYCOMPLETED', 'Partially Completed'), ('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working')], max_length=60, null=True, verbose_name='Job Status')),
                ('jobtype', models.CharField(choices=[('SCHEDULE', 'Schedule'), ('ADHOC', 'Adhoc')], max_length=50, null=True, verbose_name='Job Type')),
                ('priority', models.CharField(choices=[('HIGH', 'High'), ('LOW', 'Low'), ('MEDIUM', 'Medium')], max_length=50, verbose_name='Priority')),
                ('scantype', models.CharField(choices=[('NONE', 'None'), ('QR', 'QR'), ('NFC', 'NFC'), ('SKIP', 'Skip'), ('ENTERED', 'Entered')], default='NONE', max_length=50, verbose_name='Scan type')),
                ('identifier', models.CharField(choices=[('TASK', 'Task'), ('TICKET', 'Ticket'), ('INTERNALTOUR', 'Internal Tour'), ('EXTERNALTOUR', 'External Tour'), ('PPM', 'PPM'), ('OTHER', 'Other'), ('SITEREPORT', 'Site Report'), ('INCIDENTREPORT', 'Incident Report'), ('ASSETLOG', 'Asset Log'), ('ASSETAUDIT', 'Asset Audit'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('POSTING_ORDER', 'Posting Order')], max_length=50, null=True, verbose_name='Jobneed Type')),
                ('alerts', models.BooleanField(default=False, null=True, verbose_name='Alerts')),
                ('seqno', models.SmallIntegerField(verbose_name='Sl No.')),
                ('othersite', models.CharField(default=None, max_length=100, null=True, verbose_name='Other Site')),
                ('multifactor', models.DecimalField(decimal_places=6, default=1, max_digits=10, verbose_name='Multiplication Factor')),
                ('raisedtktflag', models.BooleanField(default=False, null=True, verbose_name='RaiseTicketFlag')),
                ('ismailsent', models.BooleanField(default=False, verbose_name='Mail Sent')),
                ('attachmentcount', models.IntegerField(default=0, verbose_name='Attachment Count')),
                ('other_info', models.JSONField(blank=True, default=apps.activity.models.job_model.other_info, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Other info')),
                ('geojson', models.JSONField(blank=True, default=apps.activity.models.job_model.geojson_jobnjobneed, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True)),
                ('deviation', models.BooleanField(default=False, null=True, verbose_name='Deviation')),
            ],
            options={
                'verbose_name': 'Jobneed',
                'verbose_name_plural': 'Jobneeds',
                'db_table': 'jobneed',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.job_manager.JobneedManager()),
            ],
        ),
        migrations.CreateModel(
            name='JobneedDetails',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('seqno', models.SmallIntegerField(verbose_name='SL No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List'), ('NONE', 'NONE'), ('METERREADING', 'Meter Reading'), ('MULTISELECT', 'Multi Select')], max_length=50, null=True, verbose_name='Answer Type')),
                ('answer', models.CharField(default='', max_length=250, null=True, verbose_name='Answer')),
                ('isavpt', models.BooleanField(default=False, verbose_name='Attachement Required')),
                ('avpttype', models.CharField(blank=True, choices=[('BACKCAMPIC', 'Back Camera Pic'), ('FRONTCAMPIC', 'Front Camera Pic'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('NONE', 'NONE')], max_length=50, null=True, verbose_name='Attachment Type')),
                ('options', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Option')),
                ('min', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(decimal_places=4, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(blank=True, max_length=300, null=True, verbose_name='Alert On')),
                ('ismandatory', models.BooleanField(default=True, verbose_name='Mandatory')),
                ('alerts', models.BooleanField(default=False, verbose_name='Alerts')),
                ('attachmentcount', models.IntegerField(default=0, verbose_name='Attachment count')),
            ],
            options={
                'verbose_name': 'JobneedDetails',
                'db_table': 'jobneeddetails',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.job_manager.JobneedDetailsManager()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, unique=True)),
                ('loccode', models.CharField(max_length=50, verbose_name='Asset Code')),
                ('locname', models.CharField(max_length=250, verbose_name='Asset Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('iscritical', models.BooleanField(default=False, verbose_name='Critical')),
                ('gpslocation', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, null=True, srid=4326, verbose_name='GPS Location')),
                ('locstatus', models.CharField(choices=[('MAINTENANCE', 'Maintenance'), ('STANDBY', 'Standby'), ('WORKING', 'Working'), ('SCRAPPED', 'Scrapped')], max_length=55, verbose_name='Running Status')),
                ('locjson', models.JSONField(blank=True, default=apps.activity.models.location_model.loc_json, encoder=django.core.serializers.json.DjangoJSONEncoder, null=True, verbose_name='Location Json')),
            ],
            options={
                'db_table': 'location',
                'ordering': ['mdtz'],
                'get_latest_by': ['mdtz', 'cdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.location_manager.LocationManager()),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('quesname', models.CharField(max_length=500, verbose_name='Name')),
                ('options', models.TextField(max_length=2000, null=True, verbose_name='Options')),
                ('min', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('max', models.DecimalField(blank=True, decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('alerton', models.CharField(max_length=300, null=True, verbose_name='Alert on')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List'), ('METERREADING', 'Meter Reading'), ('MULTISELECT', 'Multi Select')], default='NUMERIC', max_length=55, verbose_name='Type')),
                ('isworkflow', models.BooleanField(default=False, verbose_name='WorkFlow')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('avpttype', models.CharField(blank=True, choices=[('NONE', 'NONE'), ('BACKCAMPIC', 'Back Camera Pic'), ('FRONTCAMPIC', 'Front Camera Pic'), ('AUDIO', 'Audio'), ('VIDEO', 'Video')], max_length=50, null=True, verbose_name='Attachment Type')),
                ('isavpt', models.BooleanField(default=False, verbose_name='Attachment Required')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
                'db_table': 'question',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.question_manager.QuestionManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('qsetname', models.CharField(max_length=200, verbose_name='QuestionSet Name')),
                ('enable', models.BooleanField(default=True, verbose_name='Enable')),
                ('assetincludes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None, verbose_name='Asset Includes')),
                ('buincludes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None, verbose_name='Bu Includes')),
                ('seqno', models.SmallIntegerField(default=1, verbose_name='Sl No.')),
                ('type', models.CharField(choices=[('CHECKLIST', 'Checklist'), ('RPCHECKLIST', 'RP Checklist'), ('INCIDENTREPORT', 'Incident Report'), ('SITEREPORT', 'Site Report'), ('WORKPERMIT', 'Work Permit'), ('RETURN_WORK_PERMIT', 'Return Work Permit'), ('KPITEMPLATE', 'Kpi'), ('SCRAPPEDTEMPLATE', 'Scrapped'), ('ASSETAUDIT', 'Asset Audit'), ('ASSETMAINTENANCE', 'Asset Maintenance'), ('WORK_ORDER', 'Work Order'), ('SLA_TEMPLATE', 'Service Level Agreement'), ('POSTING_ORDER', 'Posting Order')], max_length=50, null=True, verbose_name='Type')),
                ('site_grp_includes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None, verbose_name='Site Group Includes')),
                ('site_type_includes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None, verbose_name='Site Type Includes')),
                ('show_to_all_sites', models.BooleanField(default=False, verbose_name='Applicable to all sites')),
                ('url', models.CharField(blank=True, default='NONE', max_length=250, null=True, verbose_name='Url')),
            ],
            options={
                'verbose_name': 'QuestionSet',
                'verbose_name_plural': 'QuestionSets',
                'db_table': 'questionset',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.question_manager.QuestionSetManager()),
            ],
        ),
        migrations.CreateModel(
            name='QuestionSetBelonging',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='cdtz')),
                ('mdtz', models.DateTimeField(default=apps.peoples.models.now, verbose_name='mdtz')),
                ('ctzoffset', models.IntegerField(default=-1, verbose_name='TimeZone')),
                ('ismandatory', models.BooleanField(default=True, verbose_name='Mandatory')),
                ('isavpt', models.BooleanField(default=False, verbose_name='Attachment Required')),
                ('seqno', models.SmallIntegerField(verbose_name='Seq No.')),
                ('answertype', models.CharField(choices=[('CHECKBOX', 'Checkbox'), ('DATE', 'Date'), ('DROPDOWN', 'Dropdown'), ('EMAILID', 'Email Id'), ('MULTILINE', 'Multiline'), ('NUMERIC', 'Numeric'), ('SIGNATURE', 'Signature'), ('SINGLELINE', 'Single Line'), ('TIME', 'Time'), ('RATING', 'Rating'), ('BACKCAMERA', 'Back Camera'), ('FRONTCAMERA', 'Front Camera'), ('PEOPLELIST', 'People List'), ('SITELIST', 'Site List'), ('NONE', 'NONE'), ('MULTISELECT', 'Multi Select')], max_length=50, verbose_name='Question Type')),
                ('avpttype', models.CharField(blank=True, choices=[('BACKCAMPIC', 'Back Camera Pic'), ('FRONTCAMPIC', 'Front Camera Pic'), ('AUDIO', 'Audio'), ('VIDEO', 'Video'), ('NONE', 'NONE')], max_length=50, null=True, verbose_name='Attachment Type')),
                ('max', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Max')),
                ('min', models.DecimalField(decimal_places=2, default=0.0, max_digits=18, null=True, verbose_name='Min')),
                ('alerton', models.CharField(blank=True, max_length=300, null=True, verbose_name='Alert on')),
                ('options', models.CharField(blank=True, max_length=2000, null=True, verbose_name='Option')),
                ('alertmails_sendto', models.JSONField(default=apps.activity.models.question_model.alertmails_sendto, encoder=django.core.serializers.json.DjangoJSONEncoder, verbose_name='Alert mails send to')),
                ('buincludes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=100), blank=True, null=True, size=None, verbose_name='Bu Includes')),
            ],
            options={
                'verbose_name': 'QuestionSetBelonging',
                'verbose_name_plural': 'QuestionSetBelongings',
                'db_table': 'questionsetbelonging',
                'ordering': ['mdtz'],
                'abstract': False,
            },
            managers=[
                ('objects', apps.activity.managers.question_manager.QsetBlngManager()),
            ],
        ),
    ]
