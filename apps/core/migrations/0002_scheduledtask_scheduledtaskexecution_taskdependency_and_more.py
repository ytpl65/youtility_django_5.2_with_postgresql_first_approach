# Generated by Django 5.2.1 on 2025-06-21 07:35

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ScheduledTask',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('task_name', models.CharField(max_length=255)),
                ('task_module', models.CharField(max_length=255)),
                ('schedule_type', models.CharField(choices=[('cron', 'Cron'), ('interval', 'Interval'), ('once', 'Once')], max_length=20)),
                ('cron_minute', models.CharField(blank=True, max_length=20)),
                ('cron_hour', models.CharField(blank=True, max_length=20)),
                ('cron_day_of_month', models.CharField(blank=True, max_length=20)),
                ('cron_month', models.CharField(blank=True, max_length=20)),
                ('cron_day_of_week', models.CharField(blank=True, max_length=20)),
                ('interval_seconds', models.IntegerField(blank=True, null=True)),
                ('task_args', models.JSONField(default=list)),
                ('task_kwargs', models.JSONField(default=dict)),
                ('queue_name', models.CharField(default='default', max_length=100)),
                ('priority', models.IntegerField(choices=[(1, 'Priority 1'), (2, 'Priority 2'), (3, 'Priority 3'), (4, 'Priority 4'), (5, 'Priority 5'), (6, 'Priority 6'), (7, 'Priority 7'), (8, 'Priority 8'), (9, 'Priority 9'), (10, 'Priority 10')], default=5)),
                ('enabled', models.BooleanField(db_index=True, default=True)),
                ('one_off', models.BooleanField(default=False)),
                ('last_run_at', models.DateTimeField(blank=True, null=True)),
                ('next_run_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('tenant_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'scheduled_tasks',
            },
        ),
        migrations.CreateModel(
            name='ScheduledTaskExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('executed_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('retrying', 'Retrying')], max_length=20)),
                ('duration_ms', models.IntegerField(blank=True, null=True)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('next_run_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'scheduled_task_executions',
            },
        ),
        migrations.CreateModel(
            name='TaskDependency',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dependency_type', models.CharField(choices=[('success', 'Success'), ('completion', 'Completion'), ('failure', 'Failure')], default='success', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_dependencies',
            },
        ),
        migrations.CreateModel(
            name='TaskExecutionHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('retrying', 'Retrying')], max_length=20)),
                ('started_at', models.DateTimeField()),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_ms', models.IntegerField(blank=True, null=True)),
                ('worker_id', models.CharField(blank=True, max_length=100)),
                ('worker_hostname', models.CharField(blank=True, max_length=255)),
                ('worker_pid', models.IntegerField(blank=True, null=True)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('traceback', models.TextField(blank=True)),
                ('memory_usage_mb', models.IntegerField(blank=True, null=True)),
                ('cpu_time_ms', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'db_table': 'task_execution_history',
            },
        ),
        migrations.CreateModel(
            name='TaskPerformanceMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_name', models.CharField(db_index=True, max_length=255)),
                ('period_start', models.DateTimeField()),
                ('period_end', models.DateTimeField()),
                ('total_executions', models.IntegerField(default=0)),
                ('successful_executions', models.IntegerField(default=0)),
                ('failed_executions', models.IntegerField(default=0)),
                ('avg_duration_ms', models.IntegerField(blank=True, null=True)),
                ('min_duration_ms', models.IntegerField(blank=True, null=True)),
                ('max_duration_ms', models.IntegerField(blank=True, null=True)),
                ('p95_duration_ms', models.IntegerField(blank=True, null=True)),
                ('p99_duration_ms', models.IntegerField(blank=True, null=True)),
                ('tasks_per_hour', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('avg_memory_mb', models.IntegerField(blank=True, null=True)),
                ('max_memory_mb', models.IntegerField(blank=True, null=True)),
                ('avg_cpu_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'task_performance_metrics',
            },
        ),
        migrations.CreateModel(
            name='TaskQueue',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('task_name', models.CharField(db_index=True, max_length=255)),
                ('task_module', models.CharField(max_length=255)),
                ('task_args', models.JSONField(default=list)),
                ('task_kwargs', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('retrying', 'Retrying')], db_index=True, default='pending', max_length=20)),
                ('priority', models.IntegerField(choices=[(1, 'Priority 1'), (2, 'Priority 2'), (3, 'Priority 3'), (4, 'Priority 4'), (5, 'Priority 5'), (6, 'Priority 6'), (7, 'Priority 7'), (8, 'Priority 8'), (9, 'Priority 9'), (10, 'Priority 10')], db_index=True, default=5)),
                ('queue_name', models.CharField(db_index=True, default='default', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('scheduled_at', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('retry_count', models.IntegerField(default=0)),
                ('max_retries', models.IntegerField(default=3)),
                ('retry_delay', models.IntegerField(default=60)),
                ('worker_id', models.CharField(blank=True, db_index=True, max_length=100)),
                ('worker_hostname', models.CharField(blank=True, max_length=255)),
                ('worker_pid', models.IntegerField(blank=True, null=True)),
                ('result', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('traceback', models.TextField(blank=True)),
                ('expires_at', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('tenant_id', models.IntegerField(blank=True, db_index=True, null=True)),
                ('created_by', models.CharField(blank=True, max_length=100)),
                ('tags', models.JSONField(default=list)),
            ],
            options={
                'db_table': 'task_queue',
            },
        ),
        migrations.CreateModel(
            name='TaskWorker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('worker_id', models.CharField(max_length=100, unique=True)),
                ('hostname', models.CharField(max_length=255)),
                ('pid', models.IntegerField()),
                ('queues', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, size=None)),
                ('max_concurrent_tasks', models.IntegerField(default=4)),
                ('current_task_count', models.IntegerField(default=0)),
                ('status', models.CharField(choices=[('active', 'Active'), ('idle', 'Idle'), ('busy', 'Busy'), ('stopping', 'Stopping'), ('stopped', 'Stopped')], db_index=True, default='active', max_length=20)),
                ('last_heartbeat', models.DateTimeField(auto_now=True, db_index=True)),
                ('total_tasks_processed', models.IntegerField(default=0)),
                ('total_processing_time_ms', models.BigIntegerField(default=0)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('stopped_at', models.DateTimeField(blank=True, null=True)),
                ('worker_version', models.CharField(blank=True, max_length=50)),
                ('python_version', models.CharField(blank=True, max_length=50)),
                ('environment', models.JSONField(default=dict)),
            ],
            options={
                'db_table': 'task_workers',
            },
        ),
        migrations.CreateModel(
            name='TaskWorkflow',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('workflow_definition', models.JSONField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('deprecated', 'Deprecated')], default='active', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.CharField(blank=True, max_length=100)),
                ('version', models.IntegerField(default=1)),
                ('tenant_id', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'task_workflows',
            },
        ),
        migrations.CreateModel(
            name='WorkerHeartbeat',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('worker_id', models.CharField(max_length=100)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('cpu_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('memory_percent', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('memory_mb', models.IntegerField(blank=True, null=True)),
                ('active_tasks', models.IntegerField(blank=True, null=True)),
                ('queue_lengths', models.JSONField(default=dict)),
                ('tasks_per_minute', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('avg_task_duration_ms', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'worker_heartbeats',
            },
        ),
        migrations.DeleteModel(
            name='RateLimitAttempt',
        ),
        migrations.AddIndex(
            model_name='scheduledtask',
            index=models.Index(condition=models.Q(('enabled', True)), fields=['next_run_at'], name='idx_scheduled_next_run'),
        ),
        migrations.AddIndex(
            model_name='scheduledtask',
            index=models.Index(fields=['name'], name='scheduled_t_name_58996a_idx'),
        ),
        migrations.AddIndex(
            model_name='scheduledtask',
            index=models.Index(fields=['enabled'], name='scheduled_t_enabled_7d78eb_idx'),
        ),
        migrations.AddField(
            model_name='scheduledtaskexecution',
            name='scheduled_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='core.scheduledtask'),
        ),
        migrations.AddIndex(
            model_name='taskperformancemetrics',
            index=models.Index(fields=['task_name'], name='task_perfor_task_na_892e84_idx'),
        ),
        migrations.AddIndex(
            model_name='taskperformancemetrics',
            index=models.Index(fields=['period_start', 'period_end'], name='task_perfor_period__ea64bc_idx'),
        ),
        migrations.AddIndex(
            model_name='taskqueue',
            index=models.Index(fields=['status', 'priority', 'scheduled_at', 'queue_name'], name='idx_task_pickup'),
        ),
        migrations.AddIndex(
            model_name='taskqueue',
            index=models.Index(condition=models.Q(('expires_at__isnull', False)), fields=['expires_at'], name='idx_task_expires'),
        ),
        migrations.AddField(
            model_name='taskexecutionhistory',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='execution_history', to='core.taskqueue'),
        ),
        migrations.AddField(
            model_name='taskdependency',
            name='depends_on_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependents', to='core.taskqueue'),
        ),
        migrations.AddField(
            model_name='taskdependency',
            name='task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dependencies', to='core.taskqueue'),
        ),
        migrations.AddField(
            model_name='scheduledtaskexecution',
            name='task',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.taskqueue'),
        ),
        migrations.AddIndex(
            model_name='taskworker',
            index=models.Index(fields=['status'], name='task_worker_status_775968_idx'),
        ),
        migrations.AddIndex(
            model_name='taskworker',
            index=models.Index(fields=['last_heartbeat'], name='task_worker_last_he_b770ad_idx'),
        ),
        migrations.AddIndex(
            model_name='taskexecutionhistory',
            index=models.Index(fields=['task_id'], name='task_execut_task_id_959d73_idx'),
        ),
        migrations.AddIndex(
            model_name='taskexecutionhistory',
            index=models.Index(fields=['created_at'], name='task_execut_created_50166f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='taskdependency',
            unique_together={('task', 'depends_on_task')},
        ),
    ]
